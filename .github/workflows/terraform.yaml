name: Terraform

on:
  push:
    branches:
      - feature/**
  pull_request:
    branches:
      - dev
      - main
env:
  TERRAFORM_CLOUD_TOKENS: app.terraform.io=${{ secrets.TF_API_TOKEN }}
  TFBACKEND: config.remote.tfbackend

jobs:
  test:
    name: Module testing
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - environment: 'esg_se_xdr_demo_dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - id: tfbackend
        uses: dawidd6/action-download-artifact@v2
        continue-on-error: true
        with:
          github_token: ${{ github.token }}
          name: ${{ matrix.environment }}
          path: ./config.remote.tfbackend.enc
      - name: Check if tfbackend already exists
        if: steps.tfbackend.outcome == 'success'
        run: |
          if [ -f ./config.remote.tfbackend.enc ]; then
            openssl enc -d -in ${{ env.tfbackend }} -aes-256-cbc -pbkdf2 -pass pass:"${{ secrets.ENCRYPTION_KEY }}" -out ./config.remote.tfbackend
          fi
      - name: Create tfbackend
        if: steps.tfbackend.outcome != 'success'
        run: |
          cat >> ./config.remote.tfbackend<<EOF
          hostname = "app.terraform.io"
          organization = "${{ secrets.ORGANIZATION_NAME }}"
          workspaces { name = "${{ env.GITHUB_REF }}"}
          EOF

          cat >> ./backend.tf<<EOF
          terraform {
            backend "remote" {}
          }
          EOF
          
          ls -lah
        env:
          GITHUB_REF: ${{ github.ref_name }}          
      - name: Use branch workspace
        uses: dflook/terraform-new-workspace@v1
        with:
          backend_config_file: ${{ env.TFBACKEND }}
          path: .

